{"version":3,"sources":["Header.js","Note.js","NotesList.js","NoteForm.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","className","href","Note","updatedAt","id","initialTitle","initialText","removeNote","updateNote","useState","setTitle","text","setText","editable","setEditable","console","log","d","Date","style","backgroundColor","border","fontSize","marginBottom","spellCheck","disabled","value","onChange","e","target","rows","toLocaleDateString","hidden","onClick","NotesList","notes","map","note","_id","key","NoteForm","addNote","onSubmit","preventDefault","htmlFor","type","Footer","App","setNotes","useEffect","axios","get","then","res","data","post","newNotes","delete","filter","updatedNote","put","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3ba83ec0.chunk.js","sourcesContent":["import React from 'react';\n\n// header component\n// con title prop\nconst Header = ({ title }) => {\n  return (\n    <nav className=\"justify-content-center navbar navbar-expand-lg navbar-dark bg-dark\">\n      <a className=\"navbar-brand\" href=\"/#\">{title}</a>\n    </nav>\n  );\n};\n\nexport default Header;\n","import React, { useState } from 'react';\n\nconst Note = ({ updatedAt, id, initialTitle, initialText, removeNote, updateNote }) => {\n\n  // note title state\n  const [title, setTitle] = useState(initialTitle);\n\n  // note text state\n  const [text, setText] = useState(initialText);\n\n  // editable state\n  const [editable, setEditable] = useState(false);\n\n  // handlers\n  // save handler\n  const handleSave = () => {\n    updateNote(id, title, text);\n    setEditable(!editable);\n  };\n\n  // CSS override de bootstrap\n  const inputStyle = {\n    backgroundColor: 'transparent',\n    border: 'none',\n    fontSize: 1.25+'rem',\n    marginBottom: 0.75+'rem'\n  };\n  const textareaStyle = {\n    backgroundColor: 'transparent',\n    border: 'none'\n  };\n\n  console.log(updatedAt);\n  let d = new Date(updatedAt);\n  console.log(d);\n  console.log(typeof d);\n\n  // render JSX\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n\n        <input\n          style={inputStyle}\n          spellCheck={false}\n          disabled={!editable}\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n\n        <textarea\n          rows={5}\n          style={textareaStyle}\n          spellCheck={false}\n          disabled={!editable}\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n        >\n        </textarea>\n        <br />\n\n        <p>Ultima modificacion {d.toLocaleDateString('es-AR')}</p>\n        <br />\n        <button className=\"btn\" hidden={editable} onClick={() => setEditable(!editable)}>\n          <i className=\"text-secondary fa fa-pencil fa-lg\"></i>\n        </button>\n\n        <button className=\"btn\" hidden={!editable} onClick={handleSave}>\n          <i className=\"text-secondary fa fa-save fa-lg\"></i>\n        </button>\n\n        <button className=\"btn\" onClick={() => removeNote(id)}>\n          <i className=\"text-danger fa fa-trash fa-lg\"></i>\n        </button>\n\n      </div>\n    </div>\n  );\n};\n\nexport default Note;\n","import React from 'react';\nimport Note from './Note';\n\nconst NotesList = ({ notes, removeNote, updateNote }) => {\n  console.log(notes);\n  // render JSX\n  return (\n    <div className=\"card-columns\">\n      {notes.map((note) => (\n        <Note\n          updatedAt={note.updatedAt}\n          id={note._id}\n          key={note._id}\n          initialTitle={note.title}\n          initialText={note.text}\n          removeNote={removeNote}\n          updateNote={updateNote}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default NotesList;\n","import React, { useState } from 'react';\n\nconst NoteForm = ({ addNote }) => {\n\n  // state hook para el form\n  const [title, setTitle] = useState('');\n  const [text, setText] = useState('');\n\n  // handlers\n  const handleSubmit = e => {\n    e.preventDefault();\n    addNote({\n      title: title,\n      text: text\n    });\n    // blanquear formulario\n    setTitle('');\n    setText('');\n  };\n\n  // render JSX\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"form-group\">\n        <label htmlFor=\"title\">TÃ­tulo</label>\n        <input\n          id=\"title\"\n          className=\"form-control\"\n          type='text'\n          value={title}\n          onChange={e => setTitle(e.target.value)}\n        />\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"text\">Texto</label>\n        <textarea\n          id=\"text\"\n          className=\"form-control\"\n          value={text}\n          rows=\"4\"\n          onChange={e => setText(e.target.value)}\n        >\n        </textarea>\n      </div>\n      <input\n        className=\"btn btn-primary\"\n        type=\"submit\"\n        value=\"Guardar\"\n      />\n    </form>\n  );\n};\n\nexport default NoteForm;\n","import React from 'react';\n\n// footer component\nconst Footer = () => {\n  return (\n    <div className=\"text-center mb-3\">\n      <hr />\n      <h4 className=\"text-muted\">Hello React</h4>\n      <a href=\"https://github.com/santiagotrini/hello-react\">\n        <i className=\"fa fa-github fa-3x text-dark\"></i>\n      </a>\n    </div>\n  );\n};\n\nexport default Footer;\n","// imports\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Header from './Header';\nimport NotesList from './NotesList';\nimport NoteForm from './NoteForm';\nimport Footer from './Footer';\n\nconst App = () => {\n\n  // useState hook (las notas de la lista)\n  const [notes, setNotes] = useState([]);\n\n  // useEffect hook (para fetchear la data al cargar)\n  useEffect(() => {\n    axios.get('/api/notes')\n      .then(res => {\n        setNotes(res.data.notes);\n      });\n  }, []);\n\n  // CRUD functions\n  // create note\n  const addNote = note => {\n    axios.post('/api/notes', note)\n      .then(res => {\n        const newNotes = [res.data, ...notes];\n        setNotes(newNotes);\n      });\n  };\n\n  // update note\n  const updateNote = (id, title, text) => {\n    const updatedNote = {\n      title: title,\n      text: text\n    };\n    axios.put('/api/notes/' + id, updatedNote)\n      .then(res => {\n        const newNotes = notes.map(note =>\n          note.id === id ? updatedNote : note\n        );\n        setNotes(newNotes);\n      });\n  };\n\n  // delete note\n  const removeNote = (id) => {\n    axios.delete('/api/notes/' + id)\n      .then(res => {\n        const newNotes = notes.filter(note => note._id !== id);\n        setNotes(newNotes);\n    });\n  };\n\n  // render JSX\n  return (\n    <div>\n      <Header title='Notas'/>\n      <div className=\"container mt-3\">\n        <NoteForm\n          addNote={addNote}\n        />\n        <hr />\n        <NotesList\n          notes={notes}\n          removeNote={removeNote}\n          updateNote={updateNote}\n        />\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\n// export\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}